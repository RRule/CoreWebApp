#pragma checksum "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\DataGrid\AdminMenuGrid.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "614e8af3cfe8a2003c1313668f1b8dd1b8a58f49"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Components_DataGrid_AdminMenuGrid), @"mvc.1.0.view", @"/Views/Components/DataGrid/AdminMenuGrid.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Components/DataGrid/AdminMenuGrid.cshtml", typeof(AspNetCore.Views_Components_DataGrid_AdminMenuGrid))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\_ViewImports.cshtml"
using CoreWebApp;

#line default
#line hidden
#line 2 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\_ViewImports.cshtml"
using CoreWebApp.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"614e8af3cfe8a2003c1313668f1b8dd1b8a58f49", @"/Views/Components/DataGrid/AdminMenuGrid.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ce38d043670142d3eeab9e7775e3d99906b8a926", @"/Views/_ViewImports.cshtml")]
    public class Views_Components_DataGrid_AdminMenuGrid : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Habufa_Extranet.Models.ViewModel.MenuGridViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\DataGrid\AdminMenuGrid.cshtml"
  
    var jsonFields = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Headers);
    var jsonRoles = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Roles);
    var jsonItems = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Items);

#line default
#line hidden
            BeginContext(306, 6167, true);
            WriteLiteral(@"
<template id=""AdminDataGrid"">
    <div>
        <v-toolbar flat>
            <v-dialog v-model=""dialog""
                      max-width=""500px"">
                <v-btn slot=""activator""
                       color=""primary""
                       dark
                       class=""mb-2"">
                    New Item
                </v-btn>

                <v-card>
                    <v-card-title>
                        <span class=""headline"">
                            {{ formTitle }}
                        </span>
                    </v-card-title>

                    <v-card-text>
                        <v-container grid-list-md>
                            <v-layout wrap>
                                <v-flex xs12
                                        sm6
                                        md4>
                                    <v-text-field v-model=""editedItem.MenuId""
                                                  label=""ID"" readonly></v-text-field>
   ");
            WriteLiteral(@"                             </v-flex>
                                <v-flex xs12
                                        sm6
                                        md4>
                                    <v-text-field v-model=""editedItem.MenuTitle""
                                                  label=""MenuTitle""></v-text-field>
                                </v-flex>
                                <v-flex xs12
                                        sm6
                                        md4>
                                    <v-text-field v-model=""editedItem.DisplayOrder""
                                                  label=""DisplayOrder"" type=""number""></v-text-field>
                                </v-flex>
                                <v-flex xs12
                                        sm6
                                        md4>
                                    <v-text-field v-model=""editedItem.MenuAction""
                                                  ");
            WriteLiteral(@"label=""MenuAction""></v-text-field>
                                </v-flex>
                                <v-flex xs12
                                        sm6
                                        md4>
                                    <v-select :items=""items""
                                              item-text=""MenuTitle""
                                              item-value=""MenuId""
                                              v-model=""editedItem.ParentId""
                                              label=""Parent"">

                                    </v-select>
                                </v-flex>
                                <v-flex xs12
                                        sm6
                                        md4>
                                    <v-text-field v-model=""editedItem.Icon""
                                                  label=""Icon""></v-text-field>
                                </v-flex>
                                <v-flex");
            WriteLiteral(@" xs12
                                        sm6
                                        md4>
                                    <v-select :items=""roles""
                                              v-model=""editedItem.Role""
                                              label=""Role""></v-select>
                                </v-flex>

                            </v-layout>

                        </v-container>
                    </v-card-text>

                    <v-card-actions>
                        <v-spacer></v-spacer>
                        <v-btn color=""blue darken-1""
                               flat
                               v-on:click=""close"">
                            Cancel
                        </v-btn>
                        <v-btn color=""blue darken-1""
                               flat
                               v-on:click=""save"">
                            Save
                        </v-btn>
                    </v-card-actions>
      ");
            WriteLiteral(@"          </v-card>
            </v-dialog>
        </v-toolbar>

        <v-data-table :headers=""headers""
                      :items=""items""
                      :loading=""loading""
                      :rows-per-page-items=""rowsPerPage""
                      fixed
                      app
                      stateless>

            <v-progress-linear slot=""progress"" color=""blue"" indeterminate></v-progress-linear>

            <template slot=""items"" slot-scope=""props"">
                <row>
                    <cell>{{ props.item.MenuTitle }}</cell>
                    <cell>{{ props.item.DisplayOrder }}</cell>
                    <cell>{{ props.item.MenuAction }}</cell>
                    <cell>{{ props.item.ParentId }}</cell>
                    <cell><v-icon small>{{ props.item.Icon }}</v-icon></cell>
                    <cell>{{ props.item.Role }}</cell>
                    <cell class=""justify-center"">
                        <v-icon small class=""mr-2""
                    ");
            WriteLiteral(@"            v-on:click=""editItem(props.item)"">
                            edit
                        </v-icon>
                        <v-icon small
                                v-on:click=""deleteItem(props.item)"">
                            delete
                        </v-icon>
                    </cell>
                </row>
            </template>

            <template slot=""no-data"">
                <v-alert :value=""!loading"" color=""error"" icon=""warning"">
                    Sorry, nothing to display here
                </v-alert>
            </template>
        </v-data-table>
    </div>
</template>

<script>
    var dataGridMenu = Vue.component('admin-menu-datagrid',
            {
            template: '#AdminDataGrid',
            data: function() {
                return {
                    dialog: false,
                    loading: true,
                    rowsPerPage:[10, 25, 50, { ""text"": ""$vuetify.dataIterator.rowsPerPageAll"", ""value"": -1 }],

      ");
            WriteLiteral("              headers: ");
            EndContext();
            BeginContext(6474, 20, false);
#line 151 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\DataGrid\AdminMenuGrid.cshtml"
                        Write(Html.Raw(jsonFields));

#line default
#line hidden
            EndContext();
            BeginContext(6494, 62, true);
            WriteLiteral(",\r\n                    items: [],\r\n                    roles: ");
            EndContext();
            BeginContext(6557, 19, false);
#line 153 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\DataGrid\AdminMenuGrid.cshtml"
                      Write(Html.Raw(jsonRoles));

#line default
#line hidden
            EndContext();
            BeginContext(6576, 4667, true);
            WriteLiteral(@",
                    pagination: {
                        rowsPerPage: 25,
                    },
                    editedIndex: -1,
                    editedItem: {
                        MenuId: 0,
                        MenuTitle: '',
                        DisplayOrder: '',
                        MenuAction: '',
                        ParentId: 0,
                        Icon: '',
                        Role: '',
                        Actions: ''
                    },
                    defaultItem: {
                        MenuId: 0,
                        MenuTitle: '',
                        DisplayOrder: '',
                        MenuAction: '',
                        ParentId: 0,
                        Icon: '',
                        Role: '',
                        Actions: ''
                    }
                }
            },
            computed: {
                formTitle: function() {
                    return this.editedIndex === -1 ? ");
            WriteLiteral(@"'New Item' : 'Edit Item';
                }
            },
            watch: {
                dialog: function(val) {
                    val || this.close();
                }
            },
            mounted: function() {
                this.initialize();
            },
            methods: {
                initialize: function () {
                    var self = this;
                    self.loading = true;
                    api({
                        method: 'get',
                        url: '/Admin/OnGetMenuItems'
                    })
                    .then( function(response){
                        if (response) {
                            self.items = response.data;
                            console.log(self.items);
                            self.loading = false;
                        }
                    });
                },
                toggleLoading: function() {
                    this.loading = !this.loading;
                },
    ");
            WriteLiteral(@"            editItem: function(item) {
                    this.editedIndex = this.items.indexOf(item);
                    this.editedItem = Object.assign({}, item);
                    this.dialog = true;
                },
                deleteItem: function(item) {
                    var index = this.items.indexOf(item);
                    var r = confirm('Are you sure you want to delete this item?');
                    if (r) {
                        this.onDelete(item);
                    }
                },
                close: function() {
                    this.dialog = false;
                },
                save: function () {
                    this.onSave(this.editedItem);
                },
                onSave: function (aitem) {
                    console.log('saving',aitem);
                    var self = this;
                    api({
                            method: 'post',
                            url: '/Admin/OnSaveMenuItem',
               ");
            WriteLiteral(@"             data: {
                                ""MenuId"": aitem.MenuId,
                                ""MenuTitle"": aitem.MenuTitle,
                                ""Icon"": aitem.Icon,
                                ""MenuAction"": aitem.MenuAction,
                                ""Role"": aitem.Role,
                                ""DisplayOrder"": aitem.DisplayOrder,
                                ""ParentId"": aitem.ParentId
                            }
                        })
                        .then( function(response) {
                            if (response) {
                                self.initialize();
                                self.close();
                            }
                        })
                        .catch(function(response) {
                            console.log(response);
                            return false;
                        });

                },
                onDelete: function (aitem) {
                    va");
            WriteLiteral(@"r self = this;
                    api({
                            method: 'post',
                            url: '/Admin/OnDeleteMenuItem',
                            data: {
                                ""MenuId"": aitem.MenuId
                            }
                        })
                        .then(function (response) {
                            if (response) {
                                self.initialize();
                            }
                        });
                }
            }

        });
</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Habufa_Extranet.Models.ViewModel.MenuGridViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
