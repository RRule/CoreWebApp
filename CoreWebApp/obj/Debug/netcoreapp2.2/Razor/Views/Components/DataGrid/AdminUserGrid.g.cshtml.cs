#pragma checksum "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\DataGrid\AdminUserGrid.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ea4515e4faf5595c8114413a20b6814f7214e1c9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Components_DataGrid_AdminUserGrid), @"mvc.1.0.view", @"/Views/Components/DataGrid/AdminUserGrid.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Components/DataGrid/AdminUserGrid.cshtml", typeof(AspNetCore.Views_Components_DataGrid_AdminUserGrid))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\_ViewImports.cshtml"
using CoreWebApp;

#line default
#line hidden
#line 2 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\_ViewImports.cshtml"
using CoreWebApp.Models;

#line default
#line hidden
#line 1 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\DataGrid\AdminUserGrid.cshtml"
using System.Threading.Tasks;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ea4515e4faf5595c8114413a20b6814f7214e1c9", @"/Views/Components/DataGrid/AdminUserGrid.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ce38d043670142d3eeab9e7775e3d99906b8a926", @"/Views/_ViewImports.cshtml")]
    public class Views_Components_DataGrid_AdminUserGrid : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Habufa_Extranet.Models.ViewModel.GridUserViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(90, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 4 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\DataGrid\AdminUserGrid.cshtml"
  
    var jsonFields = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Headers);
    var jsonItems = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Users);
    var jsonRoles = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Roles);
    var jsonCustomers = Newtonsoft.Json.JsonConvert.SerializeObject(Model.CustomerNumbers);

#line default
#line hidden
            BeginContext(432, 3356, true);
            WriteLiteral(@"

<template id=""AdminUsersDataGrid"">
    <div>
        <v-toolbar flat>
            <v-dialog v-model=""dialog""
                      max-width=""500px"">
                <v-card>
                    <v-card-title>
                        <span class=""headline"">
                            {{ formTitle }}
                        </span>
                    </v-card-title>

                    <v-card-text>
                        <v-container grid-list-md>
                            <v-layout wrap>

                                <v-flex xs12
                                        sm6
                                        md4>
                                    <v-text-field v-model=""editedItem.FirstName""
                                                  label=""FirstName""></v-text-field>
                                </v-flex>

                                <v-flex xs12
                                        sm6
                                        md4>
                 ");
            WriteLiteral(@"                   <v-text-field v-model=""editedItem.LastName""
                                                  label=""LastName""></v-text-field>
                                </v-flex>

                                <v-flex xs12
                                        sm6
                                        md4>
                                    <v-text-field v-model=""editedItem.PhoneNumber""
                                                  label=""PhoneNumber""></v-text-field>
                                </v-flex>

                                <v-flex xs12
                                        sm6
                                        md4>
                                    <v-text-field v-model=""editedItem.CellPhoneNumber""
                                                  label=""CellPhoneNumber""></v-text-field>
                                </v-flex>

                                <v-flex xs12
                                        sm6
                          ");
            WriteLiteral(@"              md4>
                                    <v-text-field v-model=""editedItem.UserName""
                                                  label=""UserName""></v-text-field>
                                </v-flex>

                                <v-flex xs12
                                        sm6
                                        md4>
                                    <v-text-field v-model=""editedItem.Email""
                                                  label=""Email""></v-text-field>
                                </v-flex>
                                <v-flex md12 sm12 xs12>
                                    <v-autocomplete v-model=""editedItem.Roles""
                                                    :items=""roles""
                                                    box
                                                    chips
                                                    color=""blue""
                                                    background-color");
            WriteLiteral(@"=""white""
                                                    label=""Select""
                                                    item-text=""Roles""
                                                    item-value=""Roles""
                                                    multiple>
");
            EndContext();
            BeginContext(3839, 1564, true);
            WriteLiteral(@"                                        <template slot=""selection""
                                                  slot-scope=""data"">
                                            <v-chip :selected=""data.selected""
                                                    close
                                                    class=""chip--select-multi""
                                                    v-on:input=""removeCustNum(data.item)"">
                                                {{ data.item }}
                                            </v-chip>
                                        </template>
                                        <template slot=""item""
                                                  slot-scope=""data"">
                                            <template v-if=""typeof data.item !== 'object'"">
                                                <v-list-tile-content v-text=""data.item""></v-list-tile-content>
                                            </template>
        ");
            WriteLiteral(@"                                    <template v-else>
                                                <v-list-tile-content>
                                                    <v-list-tile-title v-html=""data.item""></v-list-tile-title>
                                                    <v-list-tile-sub-title v-html=""data.item""></v-list-tile-sub-title>
                                                </v-list-tile-content>
                                            </template>
                                        </template>
");
            EndContext();
            BeginContext(5454, 4575, true);
            WriteLiteral(@"                                    </v-autocomplete>
                                </v-flex>

                                <v-flex md12 sm12 xs12>
                                    <v-autocomplete v-model=""editedItem.CustomerNumbers""
                                                    :items=""customerNumbersArray""
                                                    box
                                                    chips
                                                    color=""blue""
                                                    background-color=""white""
                                                    label=""Select""
                                                    item-text=""CustomerNumbers""
                                                    item-value=""CustomerNumbers""
                                                    multiple>
                                        <template slot=""selection""
                                                  slot-scope=""data"">
  ");
            WriteLiteral(@"                                          <v-chip :selected=""data.selected""
                                                    close
                                                    class=""chip--select-multi""
                                                    v-on:input=""removeCustNum(data.item)"">
                                                {{ data.item }}
                                            </v-chip>
                                        </template>
                                        <template slot=""item""
                                                  slot-scope=""data"">
                                            <template v-if=""typeof data.item !== 'object'"">
                                                <v-list-tile-content v-text=""data.item""></v-list-tile-content>
                                            </template>
                                            <template v-else>
                                                <v-list-tile-content>
              ");
            WriteLiteral(@"                                      <v-list-tile-title v-html=""data.item""></v-list-tile-title>
                                                    <v-list-tile-sub-title v-html=""data.item""></v-list-tile-sub-title>
                                                </v-list-tile-content>
                                            </template>
                                        </template>
                                    </v-autocomplete>
                                </v-flex>

                            </v-layout>

                        </v-container>
                    </v-card-text>

                    <v-card-actions>
                        <v-spacer></v-spacer>
                        <v-btn color=""blue darken-1""
                               flat
                               v-on:click=""close"">
                            Cancel
                        </v-btn>
                        <v-btn color=""blue darken-1""
                               flat
              ");
            WriteLiteral(@"                 v-on:click=""save"">
                            Save
                        </v-btn>
                    </v-card-actions>
                </v-card>
            </v-dialog>
        </v-toolbar>

        <v-data-table :headers=""headers""
                      :items=""items"" class=""elevation-1"">
            <template slot=""items"" slot-scope=""props"">
                <row>
                    <cell>{{ props.item.UserName }}</cell>
                    <cell>{{ props.item.FirstName }}</cell>
                    <cell>{{ props.item.LastName }}</cell>
                    <cell>{{ props.item.CustomerNumbers }}</cell>
                    <cell>{{ props.item.ActivationDate }}</cell>
                    <cell>{{ props.item.LastActivityDate }}</cell>
                    <cell>{{ props.item.Roles.join(', ') }}</cell>
                    <cell>{{ props.item.Email }}</cell>
                    <cell>
                        <v-icon small class=""mr-2"" v-on:click=""editItem(props.item)"">
  ");
            WriteLiteral(@"                          edit
                        </v-icon>
                    </cell>
                </row>
            </template>
        </v-data-table>
    </div>
</template>

<script>
    var dataGridDemo = Vue.component('comp-admin-users-datagrid',
        {
        name: 'comp-admin-users-datagrid',
        template: '#AdminUsersDataGrid',
        data: function () {
            return {
                dialog: false,
                headers: ");
            EndContext();
            BeginContext(10030, 20, false);
#line 194 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\DataGrid\AdminUserGrid.cshtml"
                    Write(Html.Raw(jsonFields));

#line default
#line hidden
            EndContext();
            BeginContext(10050, 26, true);
            WriteLiteral(",\r\n                items: ");
            EndContext();
            BeginContext(10077, 19, false);
#line 195 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\DataGrid\AdminUserGrid.cshtml"
                  Write(Html.Raw(jsonItems));

#line default
#line hidden
            EndContext();
            BeginContext(10096, 41, true);
            WriteLiteral(",\r\n                customerNumbersArray: ");
            EndContext();
            BeginContext(10138, 23, false);
#line 196 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\DataGrid\AdminUserGrid.cshtml"
                                 Write(Html.Raw(jsonCustomers));

#line default
#line hidden
            EndContext();
            BeginContext(10161, 26, true);
            WriteLiteral(",\r\n                roles: ");
            EndContext();
            BeginContext(10188, 19, false);
#line 197 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\DataGrid\AdminUserGrid.cshtml"
                  Write(Html.Raw(jsonRoles));

#line default
#line hidden
            EndContext();
            BeginContext(10207, 3773, true);
            WriteLiteral(@",
                pagination: {
                    rowsPerPage: 25,
                },
                editedIndex: -1,
                editedItem: {
                    Id: 0,
                    FirstName: '',
                    LastName: '',
                    PhoneNumber: '',
                    UserName: '',
                    ActivationDate: '',
                    LastActivityDate: '',
                    Email: '',
                    CustomerNumbers: '',
                    Roles: ''
                },
                defaultItem: {
                    Id: 0,
                    FirstName: '',
                    LastName: '',
                    PhoneNumber: '',
                    UserName: '',
                    ActivationDate: '',
                    LastActivityDate: '',
                    Email: '',
                    CustomerNumbers: '',
                    Roles: ''
                }
            }
        },
        computed: {
            formTitle: fun");
            WriteLiteral(@"ction() {
                return this.editedIndex === -1 ? 'New Item' : 'Edit Item';
            }
        },
        watch: {
            dialog: function(val) {
                val || this.close();
            }
        },
        mount: {

        },
        methods: {
            editItem: function(item) {
                console.log(""clicked:"", item.UserId, item);
                this.editedIndex = this.items.indexOf(item);
                this.editedItem = Object.assign({}, item);
                this.editedItem.CustomerNumbers = this.editedItem.CustomerNumbers.split(',');
                this.dialog = true;
            },
            close: function() {
                this.dialog = false;
                setTimeout(function () {
                        this.editedItem = Object.assign({}, this.defaultItem);
                        this.editedIndex = -1;}, 300);
            },
            save: function() {
                if (this.editedIndex > -1) {
                    var ");
            WriteLiteral(@"success = this.onSave(this.editedItem);
                    if (success) {
                        Object.assign(this.items[this.editedIndex], this.editedItem);
                    }

                } else {
                    var success = this.onSave(this.editedItem);
                    if (success) {
                        this.items.push(this.editedItem);
                    }
                }
                this.close();
            },
            onSave: function (aitem) {
                api({
                    method: 'post',
                    url: '/Admin/OnSaveUser',
                    data: {
                        ""Id"": aitem.Id,
                        ""FirstName"": aitem.FirstName,
                        ""LastName"": aitem.LastName,
                        ""UserName"": aitem.UserName,
                        ""Email"": aitem.Email,
                        ""CellPhoneNumber"": aitem.CellPhoneNumber,
                        ""PhoneNumber"": aitem.PhoneNumber,
         ");
            WriteLiteral(@"               ""CustomerNumbers"": aitem.CustomerNumbers.toString(),
                        ""Roles"": aitem.Roles
                    }
                })
                .then( function(response) {
                    console.log(""Saved user response:"" ,response);
                    if (response) {
                        location.reload();
                    }
                });
            },
            removeCustNum: function (item) {
                console.log(item);
                var index = this.editedItem.CustomerNumbers.indexOf(item);
                if (index >= 0) this.editedItem.CustomerNumbers.splice(index, 1);
            }
        }

    });
</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Habufa_Extranet.Models.ViewModel.GridUserViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
