#pragma checksum "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\ProductView.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6227fb5660b8761982d730c270149b5dc21d4292"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Components_ProductView), @"mvc.1.0.view", @"/Views/Components/ProductView.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Components/ProductView.cshtml", typeof(AspNetCore.Views_Components_ProductView))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\_ViewImports.cshtml"
using CoreWebApp;

#line default
#line hidden
#line 2 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\_ViewImports.cshtml"
using CoreWebApp.Models;

#line default
#line hidden
#line 1 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\ProductView.cshtml"
using Microsoft.SqlServer.Server;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6227fb5660b8761982d730c270149b5dc21d4292", @"/Views/Components/ProductView.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ce38d043670142d3eeab9e7775e3d99906b8a926", @"/Views/_ViewImports.cshtml")]
    public class Views_Components_ProductView : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Habufa_Extranet.Models.ProductInformationViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\ProductView.cshtml"
  
    var jsonProducts = Newtonsoft.Json.JsonConvert.SerializeObject(Model.GridItems.Take(3));
    var jsonCollections = Newtonsoft.Json.JsonConvert.SerializeObject(Model.CollectionList.OrderBy(x => x));
    var jsonConcepts = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Concept.Split(','));

#line default
#line hidden
            BeginContext(400, 569, true);
            WriteLiteral(@"
<template id=""ProductSearch"">
    <v-container grid-list-md text-xs-center>
        <v-layout row wrap>
            <v-flex>
                <v-flex xs6>
                    <v-select v-model=""selectedConcept""
                              :items=""conceptItems""
                              label=""Concept""></v-select>

                    <v-select v-model=""selectedCollection""
                              :items=""collectionItems""
                              label=""Collectie""></v-select>
                </v-flex>
                <v-flex xs12>

");
            EndContext();
            BeginContext(1000, 1322, true);
            WriteLiteral(@"                    <v-autocomplete v-model=""searchString""
                                    :items=""listItems""
                                    color=""blue""
                                    label=""Select""
                                    append-icon=""search""
                                    v-on:keyup.13=""searchForProducts""
                                    v-on:click:append=""searchForProducts"">
                        <template slot=""selection"" slot-scope=""data"">
                            {{ data.item.ProdId }}
                        </template>
                        <template slot=""item"" slot-scope=""data"">
                            <template v-if=""typeof data.item !== 'object'"">
                                <v-list-tile-content v-text=""data.item.ProdId""></v-list-tile-content>
                            </template>
                            <template v-else>
                                <v-list-tile-content>
                                    <v-list-tile-tit");
            WriteLiteral(@"le v-html=""data.item.ProdDscr""></v-list-tile-title>
                                    <v-list-tile-sub-title v-html=""data.item.ProdId""></v-list-tile-sub-title>
                                </v-list-tile-content>
                            </template>
                        </template>
");
            EndContext();
            BeginContext(2357, 297, true);
            WriteLiteral(@"                    </v-autocomplete>
                </v-flex>
                <v-flex xs12 text-sm-left>

                    <v-btn v-on:click=""searchForProducts"" color=""info"">Search<v-icon>search</v-icon></v-btn>
                </v-flex>

            </v-flex>
        </v-layout>

");
            EndContext();
            BeginContext(2693, 1017, true);
            WriteLiteral(@"        <v-data-table :items=""items""
                      :headers=""headers""
                      :rows-per-page-items=""maxrows""
                      class=""elevation-1"">
            <template slot=""items"" slot-scope=""props"">
                <row>
                    <cell>{{ props.item.ProdId }}</cell>
                    <cell>{{ props.item.ProdDscr }}</cell>
                    <cell>{{ props.item.HeaderDscr }}</cell>
                    <cell>{{ props.item.CommercialCollection }}</cell>
                    <cell>
                        <v-icon small class=""mr-2"" v-on:click=""getArticle(props.item)"">
                            fa-eye
                        </v-icon>
                    </cell>
                </row>
            </template>
            <template slot=""no-data"">
                <v-alert :value=""true"" color=""info"" icon=""warning"">
                    Sorry, nothing to display here
                </v-alert>
            </template>

        </v-data-table>

");
            EndContext();
            BeginContext(3739, 589, true);
            WriteLiteral(@"        <v-dialog v-model=""isLoading""
                  hide-overlay
                  persistent
                  width=""300"">
            <v-card color=""primary""
                    dark>
                <v-card-text>
                    Please stand by
                    <v-progress-linear indeterminate
                                       color=""white""
                                       class=""mb-0""></v-progress-linear>
                </v-card-text>
            </v-card>
        </v-dialog>

        <br />
        <br />
        <br />
        <br />
");
            EndContext();
            BeginContext(4359, 3103, true);
            WriteLiteral(@"        <div v-if=""selectedArticle.ProdId"">
            <v-layout row wrap>
                <v-flex xs12>
                    <v-card color=""light"">
                        <v-card-text class=""px-0"">
                            <img src=""http://extranet.habufa.local/ImageHandler.ashx?new=1&size=M&mmID=e76924207d0a34aee0436518408bde1e"" />
                        </v-card-text>
                        <v-btn absolute
                               dark
                               fab
                               bottom
                               right
                               color=""green""
                               v-on:click=""addShoppingCart()"">
                            <v-icon>shopping_cart</v-icon>
                        </v-btn>
                    </v-card>
                </v-flex>
            </v-layout>
            <v-layout row>
                <v-flex xs3>
                    <v-card flat>
                        <v-card-text>ArticleCode</v-card-text>
   ");
            WriteLiteral(@"                 </v-card>
                </v-flex>
                <v-flex xs9>
                    <v-card flat>
                        <v-card-text>
                            {{selectedArticle.ProdId}} {{selectedArticle.ProdDscr}}
                        </v-card-text>
                    </v-card>
                </v-flex>
            </v-layout>
            <v-layout row>
                <v-flex xs3>
                    <v-card flat>
                        <v-card-text>EAN</v-card-text>
                    </v-card>
                </v-flex>
                <v-flex xs9>
                    <v-card flat>
                        <v-card-text>
                            xxxx
                        </v-card-text>
                    </v-card>
                </v-flex>
            </v-layout>
            <v-layout row>
                <v-flex xs3>
                    <v-card flat>
                        <v-card-text>Collectie</v-card-text>
                    </v-card>
   ");
            WriteLiteral(@"             </v-flex>
                <v-flex xs9>
                    <v-card flat>
                        <v-card-text>
                            {{selectedArticle.CommercialCollection}}
                        </v-card-text>
                    </v-card>
                </v-flex>
            </v-layout>

        </div>
    </v-container>
</template>

<script>
Vue.component('comp-product-search',
        {
            template: '#ProductSearch',
            data: function () {
                return {
                    headers: [
                        { text: 'ProdId', value: 'ProdId', align: 'left' },
                        { text: 'ProdDscr', value: 'ProdDscr', align: 'left' },
                        { text: 'HeaderDscr', value: 'HeaderDscr', align: 'left' },
                        { text: 'CommercialCollection', value: 'CommercialCollection', align: 'left' },
                        { text: '', value: '' }
                    ],
                    maxrows: ['10'],
");
            WriteLiteral("                    listItems: ");
            EndContext();
            BeginContext(7463, 22, false);
#line 184 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\ProductView.cshtml"
                          Write(Html.Raw(jsonProducts));

#line default
#line hidden
            EndContext();
            BeginContext(7485, 37, true);
            WriteLiteral(",\r\n                    conceptItems: ");
            EndContext();
            BeginContext(7523, 22, false);
#line 185 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\ProductView.cshtml"
                             Write(Html.Raw(jsonConcepts));

#line default
#line hidden
            EndContext();
            BeginContext(7545, 40, true);
            WriteLiteral(",\r\n                    collectionItems: ");
            EndContext();
            BeginContext(7586, 25, false);
#line 186 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\ProductView.cshtml"
                                Write(Html.Raw(jsonCollections));

#line default
#line hidden
            EndContext();
            BeginContext(7611, 65, true);
            WriteLiteral(",\r\n                    items: [],\r\n                    concepts: ");
            EndContext();
            BeginContext(7677, 22, false);
#line 188 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\ProductView.cshtml"
                         Write(Html.Raw(jsonConcepts));

#line default
#line hidden
            EndContext();
            BeginContext(7699, 2636, true);
            WriteLiteral(@",
                    selectedArticle: {},
                    selectedCollection: '',
                    selectedConcept: '',
                    isLoading: false,
                    marker: true,
                    searchString: '',
                    product: '',
                }
            },
            computed: {
                uniquePosts: function () {
                    var output = [];
                    var keys = [];

                    this.items.forEach(function (post) {
                        var key = post[""CommercialCollection""];

                        if (keys.indexOf(key) === -1) {
                            keys.push(key);
                            output.push(post.CommercialCollection);
                        }
                    });

                    return output;
                }
            },
            methods: {
                searchForProducts: function () {
                    var self = this;
                    this.isLoadi");
            WriteLiteral(@"ng = true;
                    api({
                        method: 'get',
                        url: '/Product/SearchForProducts?search=' + self.searchString.ProdId
                    })
                        .then(function (response) {
                            console.log(""Success"", response);
                            self.items = response.data;
                            self.isLoading = false;
                        });
                },
                searchForCollections: function () {
                    var self = this;
                    this.isLoading = true;
                    api({
                            method: 'get',
                            url: '/Product/SearchForProducts?search=' + self.searchString.ProdId
                        })
                        .then(function (response) {
                            console.log(""Success"", response);
                            self.collectionItems = response.data;
                            self.isLo");
            WriteLiteral(@"ading = false;
                        });
                },
                addShoppingCart: function () {
                    app.$refs.nav.addShoppingCart();
                },
                getArticle: function (item) {
                    console.log(item);
                    this.selectedArticle = item;
                }
            },
            watch: {
                selectedConcept: function() {
                    console.log('changed conc');
                }
            },
            mounted: function() {
                this.selectedConcept = '");
            EndContext();
            BeginContext(10336, 41, false);
#line 256 "C:\Development_local\CoreWebApp\CoreWebApp\CoreWebApp\Views\Components\ProductView.cshtml"
                                   Write(Model.Concept.Split(',').FirstOrDefault());

#line default
#line hidden
            EndContext();
            BeginContext(10377, 45, true);
            WriteLiteral("\';\r\n            }\r\n\r\n        });\r\n</script>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Habufa_Extranet.Models.ProductInformationViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
