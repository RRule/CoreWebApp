@using Microsoft.AspNetCore.Identity
@*inject IMenuItemRepository MenuManager
    @inject UserManager<MyUser> _UserManager

        var user = await _UserManager.GetUserAsync(User);
        var jsonSideBarItems = Newtonsoft.Json.JsonConvert.SerializeObject(MenuManager.GetSideBarMenu().ToList());
    }*@
<template id="navigation">
    <div id="navigation-container">

        @* Top Navigation *@
        <v-toolbar fixed app>
            <v-toolbar-side-icon v-on:click.stop="drawer.open = !drawer.open"></v-toolbar-side-icon>
            <v-toolbar-title href="/">
                <a href="/">
                    <img src="~/images/logos/logo_habufa.png" style="max-height: 35px;" />
                </a>
            </v-toolbar-title>
            <v-spacer></v-spacer>

            <v-btn flat icon v-on:click="addShoppingCart">
                <v-badge left>
                    <span slot="badge">{{shoppingCartItems}}</span>
                    <v-icon>shopping_cart</v-icon>
                </v-badge>
            </v-btn>
            <v-menu offset-y>

                <v-btn icon flat
                       slot="activator">
                    <v-icon>account_circle</v-icon>
                </v-btn>
                <v-list>
                    <v-list-tile href="/Identity/Account/Manage" flat>
                        Profile
                    </v-list-tile>
                    <v-list-tile v-on:click="logout" flat>
                        Logout
                    </v-list-tile>
                </v-list>
            </v-menu>

            <v-toolbar-items class="hidden-sm-and-down">
                <v-btn flat>Settings</v-btn>



            </v-toolbar-items>
        </v-toolbar>
        @* End Top nav *@

        <form id="logout" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new {area = ""})"></form>
    </div>
</template>

<script>
    var sideBar = Vue.component('comp-navigation',
        {
            template: '#navigation',
            data: function () {
                return {
                    iconsize: 12,
                    drawer: {
                        open: getCookie("drawer"),
                        clipped: false,
                        fixed: true,
                        permanent: false,
                        mini: false
                    },
                    right: null,
                    items: '',
                    activeCustNum: {
                        CustomerId: ''
                    },
                    shoppingCartItems: 1
                }
            },
            props: {
                usercustomers: Array,
                userconcepts: String,
            },
            computed: {
                selectedCustomer: function () {
                    return this.usercustomers.find(cust => cust.CustomerId === this.activeCustNum);
                }
            },
            methods: {
                addShoppingCart: function () {
                    this.shoppingCartItems = this.shoppingCartItems + 1;
                },
                logout: function () {
                    document.getElementById("logout").submit();
                },
                updateActiveCustomer: function (val) {
                    console.log(val);
                    var self = this;
                    api({
                        method: 'post',
                        url: '/Secure/UpdateActiveCustomer',
                        data: {
                            customerNumber: val
                        }
                    })
                        .then(function (response) {
                            if (response.data) {
                                setCookie("activeCustomerNumber", response.data, 1);
                                location.reload();
                            }
                        })
                        .catch(function (error) {
                            app.showSnackbar('red', error);

                        });
                },
                updateUserActivity: function () {
                    api({
                        method: 'get',
                        url: '/Secure/UpdateUserActivity'
                    })
                        .then(function (response) {
                        })
                        .catch(function (error) {
                            app.showSnackbar('red', error);
                        });
                },
                activate: function () {
                    var that = this;
                    setTimeout(function () {
                        that.updateUserActivity();
                    }, 1500);
                },
                getSmallImage: function (concept) {
                    if (concept == 'H&H') {
                        return '/images/logos/sm_HandH.png';
                    }
                    if (concept == 'H@H') {
                        return '/images/logos/sm_HatH.png';
                    }
                    if (concept == 'XOOON') {
                        return '/images/logos/sm_Xooon.png';
                    }
                    if (concept == 'COCO') {
                        return '/images/logos/CocoMaison.jpg';
                    }
                    return '';
                }
            },
            watch: {
                activeCustNum: function (val) {
                    this.updateActiveCustomer(val);
                },
                'drawer.open': function (val) {
                    setCookie("drawer", val, 1);
                },
            },
            mounted: function () {
                console.log(document.cookie);
                this.activate();
            }
        });
</script>