@using Microsoft.SqlServer.Server
@model Habufa_Extranet.Models.ProductInformationViewModel
@{
    var jsonProducts = Newtonsoft.Json.JsonConvert.SerializeObject(Model.GridItems.Take(3));
    var jsonCollections = Newtonsoft.Json.JsonConvert.SerializeObject(Model.CollectionList.OrderBy(x => x));
    var jsonConcepts = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Concept.Split(','));
}

<template id="ProductSearch">
    <v-container grid-list-md text-xs-center>
        <v-layout row wrap>
            <v-flex>
                <v-flex xs6>
                    <v-select v-model="selectedConcept"
                              :items="conceptItems"
                              label="Concept"></v-select>

                    <v-select v-model="selectedCollection"
                              :items="collectionItems"
                              label="Collectie"></v-select>
                </v-flex>
                <v-flex xs12>

                    @* 000 *@
                    <v-autocomplete v-model="searchString"
                                    :items="listItems"
                                    color="blue"
                                    label="Select"
                                    append-icon="search"
                                    v-on:keyup.13="searchForProducts"
                                    v-on:click:append="searchForProducts">
                        <template slot="selection" slot-scope="data">
                            {{ data.item.ProdId }}
                        </template>
                        <template slot="item" slot-scope="data">
                            <template v-if="typeof data.item !== 'object'">
                                <v-list-tile-content v-text="data.item.ProdId"></v-list-tile-content>
                            </template>
                            <template v-else>
                                <v-list-tile-content>
                                    <v-list-tile-title v-html="data.item.ProdDscr"></v-list-tile-title>
                                    <v-list-tile-sub-title v-html="data.item.ProdId"></v-list-tile-sub-title>
                                </v-list-tile-content>
                            </template>
                        </template>
                        @* 000 *@
                    </v-autocomplete>
                </v-flex>
                <v-flex xs12 text-sm-left>

                    <v-btn v-on:click="searchForProducts" color="info">Search<v-icon>search</v-icon></v-btn>
                </v-flex>

            </v-flex>
        </v-layout>

        @* Datatable search result *@
        <v-data-table :items="items"
                      :headers="headers"
                      :rows-per-page-items="maxrows"
                      class="elevation-1">
            <template slot="items" slot-scope="props">
                <row>
                    <cell>{{ props.item.ProdId }}</cell>
                    <cell>{{ props.item.ProdDscr }}</cell>
                    <cell>{{ props.item.HeaderDscr }}</cell>
                    <cell>{{ props.item.CommercialCollection }}</cell>
                    <cell>
                        <v-icon small class="mr-2" v-on:click="getArticle(props.item)">
                            fa-eye
                        </v-icon>
                    </cell>
                </row>
            </template>
            <template slot="no-data">
                <v-alert :value="true" color="info" icon="warning">
                    Sorry, nothing to display here
                </v-alert>
            </template>

        </v-data-table>

        @* While Loading *@
        <v-dialog v-model="isLoading"
                  hide-overlay
                  persistent
                  width="300">
            <v-card color="primary"
                    dark>
                <v-card-text>
                    Please stand by
                    <v-progress-linear indeterminate
                                       color="white"
                                       class="mb-0"></v-progress-linear>
                </v-card-text>
            </v-card>
        </v-dialog>

        <br />
        <br />
        <br />
        <br />
        @* Product details *@
        <div v-if="selectedArticle.ProdId">
            <v-layout row wrap>
                <v-flex xs12>
                    <v-card color="light">
                        <v-card-text class="px-0">
                            <img src="http://extranet.habufa.local/ImageHandler.ashx?new=1&size=M&mmID=e76924207d0a34aee0436518408bde1e" />
                        </v-card-text>
                        <v-btn absolute
                               dark
                               fab
                               bottom
                               right
                               color="green"
                               v-on:click="addShoppingCart()">
                            <v-icon>shopping_cart</v-icon>
                        </v-btn>
                    </v-card>
                </v-flex>
            </v-layout>
            <v-layout row>
                <v-flex xs3>
                    <v-card flat>
                        <v-card-text>ArticleCode</v-card-text>
                    </v-card>
                </v-flex>
                <v-flex xs9>
                    <v-card flat>
                        <v-card-text>
                            {{selectedArticle.ProdId}} {{selectedArticle.ProdDscr}}
                        </v-card-text>
                    </v-card>
                </v-flex>
            </v-layout>
            <v-layout row>
                <v-flex xs3>
                    <v-card flat>
                        <v-card-text>EAN</v-card-text>
                    </v-card>
                </v-flex>
                <v-flex xs9>
                    <v-card flat>
                        <v-card-text>
                            xxxx
                        </v-card-text>
                    </v-card>
                </v-flex>
            </v-layout>
            <v-layout row>
                <v-flex xs3>
                    <v-card flat>
                        <v-card-text>Collectie</v-card-text>
                    </v-card>
                </v-flex>
                <v-flex xs9>
                    <v-card flat>
                        <v-card-text>
                            {{selectedArticle.CommercialCollection}}
                        </v-card-text>
                    </v-card>
                </v-flex>
            </v-layout>

        </div>
    </v-container>
</template>

<script>
Vue.component('comp-product-search',
        {
            template: '#ProductSearch',
            data: function () {
                return {
                    headers: [
                        { text: 'ProdId', value: 'ProdId', align: 'left' },
                        { text: 'ProdDscr', value: 'ProdDscr', align: 'left' },
                        { text: 'HeaderDscr', value: 'HeaderDscr', align: 'left' },
                        { text: 'CommercialCollection', value: 'CommercialCollection', align: 'left' },
                        { text: '', value: '' }
                    ],
                    maxrows: ['10'],
                    listItems: @Html.Raw(jsonProducts),
                    conceptItems: @Html.Raw(jsonConcepts),
                    collectionItems: @Html.Raw(jsonCollections),
                    items: [],
                    concepts: @Html.Raw(jsonConcepts),
                    selectedArticle: {},
                    selectedCollection: '',
                    selectedConcept: '',
                    isLoading: false,
                    marker: true,
                    searchString: '',
                    product: '',
                }
            },
            computed: {
                uniquePosts: function () {
                    var output = [];
                    var keys = [];

                    this.items.forEach(function (post) {
                        var key = post["CommercialCollection"];

                        if (keys.indexOf(key) === -1) {
                            keys.push(key);
                            output.push(post.CommercialCollection);
                        }
                    });

                    return output;
                }
            },
            methods: {
                searchForProducts: function () {
                    var self = this;
                    this.isLoading = true;
                    api({
                        method: 'get',
                        url: '/Product/SearchForProducts?search=' + self.searchString.ProdId
                    })
                        .then(function (response) {
                            console.log("Success", response);
                            self.items = response.data;
                            self.isLoading = false;
                        });
                },
                searchForCollections: function () {
                    var self = this;
                    this.isLoading = true;
                    api({
                            method: 'get',
                            url: '/Product/SearchForProducts?search=' + self.searchString.ProdId
                        })
                        .then(function (response) {
                            console.log("Success", response);
                            self.collectionItems = response.data;
                            self.isLoading = false;
                        });
                },
                addShoppingCart: function () {
                    app.$refs.nav.addShoppingCart();
                },
                getArticle: function (item) {
                    console.log(item);
                    this.selectedArticle = item;
                }
            },
            watch: {
                selectedConcept: function() {
                    console.log('changed conc');
                }
            },
            mounted: function() {
                this.selectedConcept = '@Model.Concept.Split(',').FirstOrDefault()';
            }

        });
</script>
